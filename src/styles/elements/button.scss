@import '../variables';
@import '../mixins';

.btn {
  --link-decoration-hover: none;

  border-radius: 3px;
  padding: 9px 18px 8px;
  font-size: 1.4rem;

  &-link {
    color: $info;
    color: var(--info);
  }

  @include list-to-string(join($interaction-types, $interaction-types3), "&-") {

    // We need to have the :not notation due to the bootstrap
    // default style will otherwise be overiding our style
    &,
    &:not(:disabled):not(.disabled) {

      &,
      &:hover,
      &:active,
      &.active {
        color: $white;
        color: var(--white);
      }
      &:hover,
      &:focus,
      &:active,
      &.active,
      &:focus:active,
      &:focus.active {
        box-shadow: inset 0 0 0 99999px rgba(255, 255, 255, 0.2);
      }
    }
  }
  @include list-to-string($interaction-types2, "&-") {

    &,
    &:not(:disabled):not(.disabled) {

      &,
      &:hover,
      &:active,
      &.active {
        color: map-get($interaction-colors, primary);
        color: var(--primary);
        background-color: map-get($interaction-colors, secondary);
        background-color: var(--secondary);
        border-color: map-get($interaction-colors, primary);
        border-color: var(--primary);
      }
      &:hover,
      &:focus,
      &:active,
      &.active,
      &:focus:active,
      &:focus.active {
        box-shadow: inset 0 0 0 99999px rgba(0, 0, 0, 0.1);
      }
    }
  }
  // Normally we wouldnt need to override the attributes set using css
  // vars. But because we need a fallback color, we now need to
  @each $type in join($interaction-types, $interaction-types3) {
    &-#{$type} {

      &,
      &:not(:disabled):not(.disabled) {

        &,
        &:hover,
        &:active,
        &.active {
          background-color: map-get($interaction-colors, $type);
          background-color: var(--#{$type});
          border-color: map-get($interaction-colors, $type);
          border-color: var(--#{$type});
        }
      }
    }
  }
  @each $type in $types {
    &-outline-#{$type} {

      & {
        color: map-get($interaction-colors, $type);
        color: var(--#{$type});
      }
      &,
      &:not(:disabled):not(.disabled) {

        &,
        &:hover,
        &:focus,
        &:active,
        &.active {
          border-color: map-get($interaction-colors, $type);
          border-color: var(--#{$type});
        }
        &:hover,
        &:focus,
        &:active,
        &.active {
          background-color: map-get($interaction-colors, $type);
          background-color: var(--#{$type});
        }
        &:focus,
        &:focus,
        &:focus:active,
        &:focus.active {
          box-shadow: none;
        }
      }
    }
  }
  @each $type in $interaction-types {
    &-outline-#{$type} {

      &:not(:disabled):not(.disabled) {

        &:hover,
        &:focus,
        &:active,
        &.active {
          color: $white;
          color: var(--white);
        }
      }
    }
  }
  @each $type in $interaction-types2 {
    &-outline-#{$type} {

      &:not(:disabled):not(.disabled) {

        &:hover,
        &:focus,
        &:active,
        &.active {
          color: $primary;
          color: var(--primary);
        }
      }
    }
  }
  @each $type in $interaction-types3 {
    &-outline-#{$type} {
      color: $white;
      color: var(--white);
    }
  }
}