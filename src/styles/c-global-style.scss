@import 'variables';
@import 'mixins';

$interaction-types: success, info, warning, danger;
$interaction-types2: secondary, light;
$interaction-types3: primary, dark;

$types: join(join($interaction-types, $interaction-types2), $interaction-types3);

.btn {

  &:not(:disabled):not(.disabled) {

    &:focus,
    &.focus {

      &,
      &:active,
      &.active {
        box-shadow: none;
      }
    }
  }

  @include list-to-string(join($interaction-types, $interaction-types3), "&-") {

    &,
    &:not(:disabled):not(.disabled) {

      &,
      &:hover,
      &:active,
      &.active {
        color: $white;
        color: var(--white);
      }
      &:hover,
      &:active,
      &.active {
        box-shadow: inset 0 0 0 99999px rgba(255, 255, 255, 0.2);
      }
    }
  }
  @include list-to-string($interaction-types2, "&-") {

    &,
    &:not(:disabled):not(.disabled) {

      &,
      &:hover,
      &:active,
      &.active {
        color: map-get($interaction-colors, primary);
        color: var(--primary);
        background-color: map-get($interaction-colors, secondary);
        background-color: var(--secondary);
        border-color: map-get($interaction-colors, primary);
        border-color: var(--primary);
      }
      &:hover,
      &:active,
      &.active {
        box-shadow: inset 0 0 0 99999px rgba(0, 0, 0, 0.1);
      }
    }
  }
  // Normally we wouldnt need to override the attributes set using css
  // vars. But because we need a fallback color, we now need to
  @each $type in join($interaction-types, $interaction-types3) {
    &-#{$type} {

      &,
      &:not(:disabled):not(.disabled) {

        &,
        &:hover,
        &:active,
        &.active {
          background-color: map-get($interaction-colors, $type);
          background-color: var(--#{$type});
          border-color: map-get($interaction-colors, $type);
          border-color: var(--#{$type});
        }
      }
    }
  }
  @each $type in $types {
    &-outline-#{$type} {

      & {
        color: map-get($interaction-colors, $type);
        color: var(--#{$type});
      }
      &,
      &:not(:disabled):not(.disabled) {

        &,
        &:hover,
        &:active,
        &.active {
          border-color: map-get($interaction-colors, $type);
          border-color: var(--#{$type});
        }
        &:hover,
        &:active,
        &.active {
          background-color: map-get($interaction-colors, $type);
          background-color: var(--#{$type});
        }
      }
    }
  }
  @each $type in $interaction-types {
    &-outline-#{$type} {

      &:not(:disabled):not(.disabled) {

        &:hover,
        &:active,
        &.active {
          color: $white;
          color: var(--white);
        }
      }
    }
  }
  @each $type in $interaction-types2 {
    &-outline-#{$type} {

      &:not(:disabled):not(.disabled) {

        &:hover,
        &:active,
        &.active {
          color: $primary;
          color: var(--primary);
        }
      }
    }
  }
  @each $type in $interaction-types3 {
    &-outline-#{$type} {
      color: $white;
      color: var(--white);
    }
  }
}

// map css properties that will be modified for each element
$util-props: (
  bg : background-color,
  text : color,
  border: border-color
);

@each $key, $value in $util-props {
  .#{$key} {
   
    @each $type in $types {
      &-#{$type} {
        #{$value}: map-get($interaction-colors, $type) !important;
        #{$value}: var(--#{$type}) !important;
      }
    }
  }
}

$elements : alert, badge, table, list-group-item;

@each $el in $elements {
  .#{$el} {
    @each $type in join($interaction-types, $interaction-types3) {
      $selector: if($el == table, '&-#{$type} th, &-#{$type} td', '&-#{$type}');
      #{$selector} {
        background-color: map-get($interaction-colors, $type);
        background-color: var(--#{$type});
        color: #fff;
        color: var(--white);
      }
    }
  }
}
