@import 'variables';

$link-color: #909090;
// TODO: This color should be set using variable $theme-01 change this
// when variables in theme have been moved to a separate variables file.
$link-color-hover: $theme-01;
$sub-hover-underline-color: #d6001c;
$link-bg : #f5f5f5;

%nav-item {
  color: $link-color; // Fallback for non supported browsers
  color: var(--link-color);
  padding: 10px 25px;
  text-decoration: none;
  border-top: 1px solid #e2e2e2;
  background-color: $link-bg;
  background-color: var(--link-bg);
}
// Sass compiler renders :hover and :before differently
// and this is due to browsers lackof support
%nav-link-hover {
  --link-color: var(--link-color-hover);

  color: $link-color-hover; // Fallback for non supported browsers
  color: var(--theme-01);
  text-decoration: none;
  --link-decoration-hover: none;
}

:host {
  --link-color: #{$link-color};
  --link-color-hover: var(--theme-01);
  --link-bg: #{$link-bg};

  display: flex;
  font-family: 'Scania Sans';
  font-size: 1.4rem;
  font-weight: bold;
  text-transform: uppercase;
  background-color: #fff;
  height: 100%;
}
:host([slot=sub]) {
  background-color: #fff;
  display: none;
  text-transform: capitalize;
  font-weight: normal;
}
:host([slot=sub][open=true]),
:host([slot=sub].open) {
  display: block;
}
// If we can fix the bug in the css parser for ie
// Then this rule needs to have [open] as well
:host([open=true]:not([slot=sub])),
:host(.open:not([slot=sub])) {
  > .navbar {
    margin-left: -100%;
  }
}

::slotted(a) {
  @extend %nav-item;
}
::slotted(div) {
  border-top: 1px solid #e2e2e2;
  padding: 10px 25px;
}
:host(:not([slot=sub])) ::slotted(a:first-of-type) {
  border-top: 0;
}

// Due to browsers not supporting: ::slotted(a):hover
// we need to have the hover separated instead of nested
::slotted(a:hover),
::slotted(a.active),
::slotted(a[active]) {
  @extend %nav-link-hover;
}

ul {
  margin: 0;
}

.navbar {
  display: block;
  padding: 0;
  transition: all 250ms ease;
  order: -1; /* This is needed for ie - due to it beeing render after slots */
  height: calc(75vh - 64px);;
  overflow-y: auto;
  padding-bottom: 5px;

  .navbar-nav {

    .nav-item {
      @extend %nav-item;

      &.nav-link {

        &:hover,
        &.active,
        &[active] {
          @extend %nav-link-hover;
        }
      }
      &.toggle-sub {
        border-top: 0;
        position: relative;
        background-color: #f5f5f5;
      }
    }
    .caption {
      display: none;
    }
  }
  &:not(.show) {
    display: block;
    height: 0;
    overflow: hidden;
    padding-bottom: 0;
  }
}
:host([slot=sub]),
.navbar {
  min-width: 100%;
}

.sub-navigation {
  overflow: hidden;
  border-top: 1px solid #d3d3d3;
}

@media (min-width: 992px) {

  %nav-item-desktop {
    padding: 20px 0;
    border-top: 0;
    background:transparent;
    background:var(--link-bg);

    &:before,
    &:after {
      content: "";
      padding: 0 15px;
    }
  }
  %nav-item-sub-desktop {
    padding: 10px 14px;
    position: relative;

    &:before,
    &:after {
      content: none;
    }
  }
  %nav-item-sub-desktop-hover {
    &:after {
      content: '';
      border-bottom: 2px solid $sub-hover-underline-color; // Fallback for non supported browsers
      border-bottom: 2px solid var(--theme-03);
      position: absolute;
      left: 15px;
      right: 15px;
      bottom: 12px;
      margin-bottom: -4px;
    }
  }
  %nav-item-separator-desktop-before {
    border-left: 1px solid #e2e2e2;
  }

  :host {
    --link-bg : transparent;

    background-color: #fff;
    flex-direction: column;
    position: sticky;
    position: -webkit-sticky;
    top:0;
    margin-bottom:var(--navHeight);
    height: auto;
    .navbar-symbol {
      padding: 13px;
      background-color: inherit;
      z-index: 1;
      display: block;
      position: absolute;
      top:0px;
      right: 55px;
    
      &:before {
        position: absolute;
        content: '';
        // These files are generated and will exist in dist
        background-image: url(../images/symbol.png);
        background-image: url(../images/symbol.svg);
        background-repeat: no-repeat;
        background-size: cover;
        width: 48px;
        height: 0;
        transition: top 250ms ease-in-out 50ms, height 50ms ease-in-out;
        top: -50px;
      }
    }
  }
  :host(:not([slot=sub])) {
    border-bottom: 1px solid #d3d3d3;
  }
  :host([slot=sub]) {
    background-color: #f5f5f5;
    border-top: 1px solid #d3d3d3;
    padding: 0 15px;
    ::slotted(a) {
      @extend %nav-item-sub-desktop;
    }

    ::slotted(a:hover),
    ::slotted(a:active),
    ::slotted(a[active]) {
      @extend %nav-item-sub-desktop-hover
    }

    .navbar-symbol {
      display: none;
    }

    .navbar {
      .navbar-nav {

        .nav-item {
          @extend %nav-item-sub-desktop;
        }
        .caption {
          display: block;
          color: #000;
          text-transform: uppercase;
  
          &:after {
            content: "";
            border-right: 1px solid #e2e2e2;
            padding: 0 15px;
          }
        }
      }
    }
  }
  :host([slot=sub][open]),
  :host([slot=sub].open) {
    display: none;
  }
  :host([slot=sub][active]),
  :host([slot=sub].active) {
    display: block;
  }
  // We have a bug in the css parser for ie, it cant handle multiple :not
  // Would like to have: :host([open=true]:not([open=false]):not([slot=sub])),
  :host([open=true]:not([slot=sub])),
  :host(.open:not([slot=sub])) {

    > .navbar {
      margin-left: 0;
    }
  }

  ::slotted(a){
    @extend %nav-item-desktop;

    display: flex;
  }  
  ::slotted(div) {
    @extend %nav-item-desktop;

    display: flex;
    border-top:0;
  }
  ::slotted(a:not(:first-child)) {

    &:before {
      @extend %nav-item-separator-desktop-before;
    }
  }
  ::slotted(div:not(:first-child)) {

    &:before {
      @extend %nav-item-separator-desktop-before;
    }
  }
  ::slotted(a[slot="secondary-items"]):before {
    border-left: 0;
  }
  ::slotted(a[slot="secondary-items"]:not(:last-of-type)):after {
    border-right: 1px solid #e2e2e2;
  }

  .navbar {
    display: flex;
    transition: padding-right 150ms cubic-bezier(0.22, 0.61, 0.36, 1);
    height: auto;
    padding-bottom: 0;

    .navbar-nav {

      .nav-item {
        @extend %nav-item-desktop;

        border-top: 0;
        &:first-of-type {
          border-bottom: 0;
        }

        + .nav-item {

          &:before {
            @extend %nav-item-separator-desktop-before;
          }
        }
      }
    }
    &:not(.show) {
      display: flex;
      height: auto;
      overflow: auto;
    }
  }

  :host([stuck=true]:not([slot=sub])) {
    -webkit-box-shadow: 0px 17px 15px -15px rgba(0, 0, 0, 0.15);
    box-shadow: 0px 17px 15px -15px rgba(0, 0, 0, 0.15);  
    > .navbar {  
      padding-right: 80px;  
    }
    .navbar-symbol {
      &:before {
        top:12px;
        width: 40px;
        height: 38px;
      }
    }
  }
}

// IE special handling
@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
  :host {
    height: auto;
  }
  @media (min-width: 992px) {
    :host {
      position: relative;
    }
    :host([stuck=true]:not([slot=sub])) {
      position: fixed;
    }
  }
}

// We need this rule because !important will replace IE inline style value on desktop
// set margin-bottom to unset, auto, or initial on IE desktop will cause flickering because of miscalculation in IE
@media (max-width: 992px) {
  :host {
    margin-bottom: 0!important;
  }
}